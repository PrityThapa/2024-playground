This write up cover-ups the knowledge gained from solving the problems provided at 'Learn Git Branching'.

Part 1 - INTRODUCTION SEQUENCE.

Level 1(Introduction to git commit): It is the introduction of git commits meaning that the commit takes the snapshot of all the changes in working directory.
Commands: 
                git commit
                git commit
Explanation: It just made changes to the repository and saved them as a commit.

       

Level 2 (Branching in Git): Branches are the pointer to a snapshot of the changes.
Commands:
          git branch bugFix
          git checkout bugFix
Explanation: It creates the branch named bugFix where we switch from the working directory to the branch named 'bugFix'.


Level 3 (Merging in Git):This is done to combine the work of different branches.
Commands:
        git branch bugFix
        git checkout bugFix
        git commit
        git checkout main
        git commit
        git merge bugFix
Explanation: Firstly, it creates a branch named bugfix where we switch from the working directory to that branch and we commit. Again, the branch is switched to main and bugfix is merged there.



Level 4(Rebase Introduction): Rebasing rewrites the commit history to create a linear sequence of commits unlike, merging which preserves the history of commits.
Commands:
        git branch bugFix
        git checkout bugFix
        git commit
        git checkout main; commit
        git checkout bugFix
        git rebase main
Explanation: Here we switched to the branch created named bugfix which is committed. Then, we switched to main and commit it. Again, we switch to bugFix and rebasing is done with main. It keeps the bugFix branch upto date with changes according to the main branch.




Part2: MOVING AROUND GIT.

Level 1(Detach yo' HEAD): It teaches how to move through the commit tree. HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.
Commands:
          git checkout c4
Explanation: It switches the working directory to c4 where we are not in any branch but viewing the repository at the state of the particular commit.


Level 2(Relative Refs (^)): It is the way of referring to commits relative to the current commit or another specified commit. It navigates the commit history without knowing the commit hashes.Moving upwards one commit at a time with '^' symbol.
Commands:
           git checkout c3
Explanation:  It switches your working directory to c3, where we are only viewing the project as it was at that commit, but not on any branch.



Level 3(Relative Refs #2(~)): Instead of typing (^) several times to move upward at a time, Git has the tilde (~) operator which takes the specified number if parents you want to ascend.
Commands:
         git branch -f bugfix HEAD~2
         git branch -f main c6
         git checkout c1
Explanation: The history of bugfix branch is reset to c0 regardless of the previous state. Then, it forcefully updates the main branch to point to the commit with the identifier c6. Checking out the specific commit means that we are viewing the state of the repository at that particular commit without being on any branch.


Level 4(Reversing Changes in Git): Here, the command revert has been used which creates a new commit that undones the change made by previous commit. It doesn't changes the existing commit history by simply adding a new commit.
Commands:
         git checkout pushed
         git revert c2
         git checkout local
         git branch -f local HEAD~1
Explanation: It switches the working directory to the pushed branch where a new commit is created on the pushed branch that reverses the changes made by commit c2.Again, it switches the working directory to the local branch which forcefully moves the local branch to point to the commit before the current HEAD (one commit back), discarding the latest commit on the local branch.



Part3: MOVING WORK AROUND

Level 1(Cherry-pick Intro): Cherry-pick is a way of saying that you would like to copy a series of commits below your current location(HEAD). It lets you selectively change the branch without merging the branch entirely.
Commands:
        git cherry-pick c3 c4 c5
Explanation: Here, it copies the branches c3 c4 and c5 below the current location.



Level 2(Interactive Rebase Intro): 'Rebase' command is used when the commit wanted are not known. It will open up a UI to show you which commits are about to be copied below the target of the rebase.
Commands:
        git rebase -i HEAD~4
Explanation: This command allows you to interactively edit the last four commits on your current branch. '-i' allows you to edit, reorder, squash or drop commit during rebase making it interactive.


Level 3 (A Mixed Bag)

Level 1 (Grabbing just 1 commit): Here, the branches are picked freely with the command 'cherry-pick' and append it to the working HEAD. 
Commands:
         git checkout main
         git cherry-pick c4

Explanation: Firstly, the branch 'main' have been entered  with checkout command and only the branch c4 have been cherry-picked whose parent is c1.


Level 2 (Juggling commits):
 Commands:
          git rebase -i caption~2
          git commit --amend
          git rebase -i caption~2
          git branch -f main caption

Explanation: It allows the interactive rebase from two commit history before the 'caption' branch. '--amend' command amends the most recent commit.


Level 3 (Juggling commits#2)
Commands:
         git checkout main
         git cherry-pick c2
         git commit --amend
         git cherry-pick c3

Explanation: It picks the specified commits c2 and c3 from another branch and apply them to the main branch. The applied changes are adjusted through 'commit --amend' command.

Level 4(Git Tags) : Git tags permanently mark certain commits as "milestones" that you can then reference like a branch.

Commands:
         git tag v0 c1
         git checkout c2
         git tag v1 c2
Explanation: Here, the tag named v0 has been given to the branch c1 through 'tag' command and tag named v1 to the branch c2.


Level 5(Git Describe): It is used to describe where you are relative to the closest 'anchor' (tag).

Commands:
         git describe
         git commit

Explanation: It describe the where you are i.e. v1_2_gC6 . v1 means the closest ancestor tag in history, 2 means how many commits away that tag is, and gC6 means the hash of the commit described.


Part 5: Advanced topics.
Level 1( Rebasing multiple branch): Rebasing have been done multiple times to change the parent of the branch.

Commands:
        git rebase main bugfix
        git rebase side another
        git branch -f main HEAD

Explanation: The multiple branches has been multiple times and at last the 'main' branch have been forcefully updated to point to the 'HEAD'.


Level 2(Specifying Parents):The modifier on ^ specifies which parent reference to follow from a merge commit. The merge commits have multiple parents, so the path to choose is ambiguous.

Commands: 
         git checkout c2
         git branch bugWork
         git checkout main

Explanation: Here, the new branch bugWork is created from c2 and ensuring that the working directory returns to main.


Level 3(Branch Spaghetti): Here the repository's branch structure is overly tangled and making it difficult to understand the project's history and the relationships between branches. We have to simplify the history.

Commands:
         git checkout c2
         git rebase HEAD three
         git checkout c1
         git cherry-pick c4 c3 c2
         git rebase HEAD one
         git checkout two
         git cherry-pick c5 c4 c3 c2

Explanation:  hese commands involve navigating through different commits and branches, applying specific changes through cherry-picking, and aligning branches using rebasing. This process can be used to selectively integrate changes and synchronize branches, but it requires careful handling to avoid conflicts and ensure a clean project history.
        

























































       
             